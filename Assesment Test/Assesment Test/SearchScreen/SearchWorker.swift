//
//  SearchWorker.swift
//  Assesment Test
//
//  Created by Kalyan Thakur on 23/03/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

typealias UnitsResponseCompletion = ([UnitsParse])->Void

class SearchWorker
{
    func getBlockDataFromJson(completion:@escaping UnitsResponseCompletion) {
        let url = Bundle.main.url(forResource: "data", withExtension: "json")!
        let data = try! Data(contentsOf: url)
        let json = try! JSONSerialization.jsonObject(with: data, options: [])
        if let jsonArray = json as? [[String: Any]] {
            print( jsonArray)
            var units = [UnitsParse]()
            let json = JSON(jsonArray)
            json.array?.forEach({ (js) in
                let unit = js["units"].array?.compactMap({ (dict) -> UnitsParse? in
                    return UnitsParse(json: dict)
                })
                units.append(contentsOf: unit ?? [])
            })
            completion(units)
        }
    }
    
    func loadBlockDataToLocalStorage(units:[UnitsParse]) {
        coreDataManager.insertUnitDetail(units: units)
    }
    
    func searchBlockDataToLocalStorage(searchText: String) -> [UnitsParse]? {
        var unitData = [UnitsParse]()
        coreDataManager.searchUnitData(searchText: searchText) { (units, activities) in
            units?.forEach({ (unit) in
                let activity = activities?.filter({ (act) -> Bool in
                    return act.unitsId == unit.id
                })
                let parse = UnitsParse(unit: unit, activities: activity ?? [])
                if !(unitData.contains(where: { (unitt) -> Bool in
                    return unitt.id == parse.id
                })) {
                    unitData.append(UnitsParse(unit: unit, activities: activity ?? []))
                }
            })
        }
        coreDataManager.searchActivitiesData(searchText: searchText) { (units, activities) in
            units?.forEach({ (unit) in
                let activity = activities?.filter({ (act) -> Bool in
                    return act.unitsId == unit.id
                })
                let parse = UnitsParse(unit: unit, activities: activity ?? [])
                if !(unitData.contains(where: { (unitt) -> Bool in
                    return unitt.id == parse.id
                })) {
                    unitData.append(UnitsParse(unit: unit, activities: activity ?? []))
                }
            })
        }
        return unitData.count == 0 ? nil : unitData
    }
    
}

