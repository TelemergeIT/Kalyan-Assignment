//
//  SearchViewController.swift
//  Assesment Test
//
//  Created by Kalyan Thakur on 23/03/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



class SearchViewController: UIViewController, SearchPresenterOutput
{
    // MARK: Outlets
    @IBOutlet weak var tagListView: TagListView!
    @IBOutlet weak var tagViewHeight: NSLayoutConstraint!
    @IBOutlet weak var searchBottom: UIImageView!
    @IBOutlet weak var clearButton: UIButton!
    @IBOutlet weak var searchError: UIImageView!
    @IBOutlet weak var searchResult: UILabel!
    @IBOutlet weak var resultsView: UIView!
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Properties
    var interactor: SearchInteractor?
    var router: SearchRouter?
    var blocks = [String]()
    var allUnitParse = [UnitsParse]()
    var unitParse = [UnitsParse]()
    var selectedBlocks = 0
    var allTags = [String]()

    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tagListView.delegate = self
        tagViewHeight.isActive = false
        let height = NSLayoutConstraint(item: tagListView!, attribute: .height, relatedBy: .greaterThanOrEqual, toItem: tagListView, attribute: .height, multiplier: 0, constant: 50)
        tagListView.addConstraint(height)
        registerNib()
        self.searchResult.attributedText = appSharedData.addDifferentColorToText(fulltext: "Type to start searching for Units, Activity, Status.", coloredtext: "Units, Activity, Status", normalColor: UIColor.white, highlightedColor: UIColor.systemYellow)
        setup()
        fetchBlocks()
    }
    
    // MARK: Setup
    private func setup()
    {
        self.title = "Search"
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    // MARK: Action
    @IBAction func clearButtonAction(sender: UIButton) {
        self.clearButton.isHidden = true
        self.resultsView.isHidden = true

        self.tagListView.removeAllTags()
        self.allTags.removeAll()
        self.blocks.removeAll()
        self.unitParse.removeAll()
        self.allUnitParse.removeAll()
        self.unitParse.removeAll()
        
        self.collectionView.reloadData()
        self.tableView.reloadData()
        
        self.searchResult.attributedText = appSharedData.addDifferentColorToText(fulltext: "Type to start searching for Units, Activity, Status.", coloredtext: "Units, Activity, Status", normalColor: UIColor.white, highlightedColor: UIColor.systemYellow)
        self.searchError.image = UIImage(named: "Search_Landing")
    }
    
    // MARK: SearchInteractorInput
    func fetchBlocks() {
        interactor?.fetchBlockDataFromJson()
    }
    
    // MARK: SearchPresenterOutput
    func displayBlockDataFromJson(units: [UnitsParse]) {
        interactor?.loadBlockDataToLocalStorage(units: units)
    }
    
    func displaySearchResult(units: [UnitsParse]?) {
        self.blocks.removeAll()
        self.unitParse.removeAll()
        self.allUnitParse.removeAll()
        if let result = units {
            self.allUnitParse = result
            self.resultsView.isHidden = false
            self.blocks = result.compactMap({ (unit) -> String? in
                return unit.blockName
            })
            self.blocks.insert("All", at: 0)
            self.blocks = uniq(source: self.blocks)
            if selectedBlocks != 0 {
                self.unitParse = self.allUnitParse.filter({ (unit) -> Bool in
                    return unit.blockName == self.blocks[selectedBlocks]
                })
            } else {
                self.unitParse = self.allUnitParse
            }
        } else {
            let searchText = allTags.joined(separator: ",")
            self.searchResult.attributedText = appSharedData.addDifferentColorToText(fulltext: "Term \(searchText) not found", coloredtext: searchText, normalColor: UIColor.white, highlightedColor: UIColor.systemYellow)
            self.searchError.image = UIImage(named: "Error_Search")
            self.resultsView.isHidden = true
        }
        self.collectionView.reloadData()
        self.tableView.reloadData()
    }
    func uniq<S : Sequence, T : Hashable>(source: S) -> [T] where S.Iterator.Element == T {
        var buffer = [T]()
        var added = Set<T>()
        for elem in source {
            if !added.contains(elem) {
                buffer.append(elem)
                added.insert(elem)
            }
        }
        return buffer
    }
}

// MARK: TagListViewDelegate
extension SearchViewController: TagListViewDelegate {
    
    func tagListView(_ sender: TagListView, didAdd title: String) {
        allTags.append(title)
        callSearchVisitForPlaces()
        clearButton.isHidden = false
    }
    
    func tagListView(_ sender: TagListView, didRemove title: String) {
        allTags.remove(object: title)
        callSearchVisitForPlaces()
        clearButton.isHidden = allTags.count == 0
    }
    func callSearchVisitForPlaces() {
        self.blocks.removeAll()
        self.unitParse.removeAll()
        self.allUnitParse.removeAll()
        for tag in allTags {
            interactor?.searchTextInLocalDatabase(searchText: tag)
        }
    }
}

// MARK: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout
extension SearchViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func registerNib() {
        collectionView.registerNib(cell: CollectionViewCell.self)
        tableView.register(TableViewHeadeView.self, forHeaderFooterViewReuseIdentifier: "TableViewHeadeView")
        tableView.register(UINib(nibName: "TableViewHeadeView", bundle: nil), forHeaderFooterViewReuseIdentifier: "TableViewHeadeView")
        tableView.registerNib(cell: TableViewCell.self)
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return blocks.count
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueCell(withReusable: CollectionViewCell.self, for: indexPath)
        cell.titleLabel.text = blocks[indexPath.row]
        cell.selectionImageView.isHidden = !(selectedBlocks == indexPath.row)
        return cell
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let height = collectionView.frame.size.height
        let width = blocks[indexPath.row].width(withConstrainedHeight: height, font: UIFont.systemFont(ofSize: 15))
        return CGSize(width: (width + 20), height: height)
    }
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        selectedBlocks = indexPath.row
        if selectedBlocks != 0 {
            self.unitParse = self.allUnitParse.filter({ (unit) -> Bool in
                return unit.blockName == self.blocks[selectedBlocks]
            })
        } else {
            self.unitParse = self.allUnitParse
        }
        self.collectionView.reloadData()
        self.tableView.reloadData()
    }
}


// MARK: UITableViewDelegate, UITableViewDataSource
extension SearchViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return self.unitParse.count
    }
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = tableView.dequeueReusableHeaderFooterView(withIdentifier: "TableViewHeadeView") as! TableViewHeadeView
        headerView.backgroundColor = UIColor.clear
        headerView.unitNameLabel.text = self.unitParse[section].title
        return headerView
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.unitParse[section].activities.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueCell(withReusable: TableViewCell.self, for: indexPath)
        cell.activities = self.unitParse[indexPath.section].activities[indexPath.row]
        return cell
    }
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 80
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
